from flask import Flask
from threading import Thread
import telebot
from telebot import types
import time
import json
import os

app = Flask('')

@app.route('/')
def home():
    return "I'm alive!"

def run():
    app.run(host='0.0.0.0', port=8080)

def keep_alive():
    t = Thread(target=run)
    t.start()

# ==== Telegram Bot ====

API_TOKEN = '7985573195:AAEG-o5jU_3A9Umkm1lsPGGefjU-OtchH0A'
ADMIN_ID = 8080902095
DATA_FILE = "users.json"

bot = telebot.TeleBot(API_TOKEN)

def load_users():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r") as f:
            return json.load(f)
    return {}

def save_users():
    with open(DATA_FILE, "w") as f:
        json.dump(users, f)

users = load_users()

def get_main_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–ë–æ–Ω—É—Å –¥–Ω—è', '–ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥—Ä—É–≥–∞')
    markup.add('–¢–æ–ø-10', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '–ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å')
    markup.add('–í–∏–≤–µ—Å—Ç–∏')
    return markup

@bot.message_handler(commands=['start'])
def start(message):
    user_id = str(message.from_user.id)
    args = message.text.split()

    if user_id not in users:
        users[user_id] = {
            'stars': 0.0,
            'last_bonus': 0,
            'refs_count': 0
        }

    if len(args) > 1:
        ref_id = args[1]
        if ref_id != user_id and ref_id in users:
            users[ref_id]['stars'] += 3
            users[ref_id]['refs_count'] += 1
            bot.send_message(int(ref_id), "üéâ –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ 3 –∑—ñ—Ä–∫–∏ –∑–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–æ–≥–æ –¥—Ä—É–≥–∞!")

    save_users()
    markup = get_main_keyboard()
    bot.send_message(message.chat.id,
                     "–¶–µ –±–æ—Ç –¥–ª—è –∑–∞—Ä–æ–±—ñ—Ç–∫—É –∑—ñ—Ä–æ–∫.\n"
                     "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –¥–∞—î 3 –∑–∞ –∫–æ–∂–Ω–æ–≥–æ –¥—Ä—É–≥–∞!\n\n"
                     "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ:",
                     reply_markup=markup)

@bot.message_handler(func=lambda m: m.text == '–ë–æ–Ω—É—Å –¥–Ω—è')
def daily_bonus(message):
    user_id = str(message.from_user.id)
    if user_id not in users:
        bot.send_message(message.chat.id, "‚ùó –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start –¥–ª—è –ø–æ—á–∞—Ç–∫—É.")
        return

    now = time.time()
    if now - users[user_id]['last_bonus'] >= 86400:
        users[user_id]['last_bonus'] = now
        users[user_id]['stars'] += 0.1
        bot.send_message(message.chat.id, "‚úÖ –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ 0.1 –∑—ñ—Ä–∫–∏ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ!")
    else:
        left = int(86400 - (now - users[user_id]['last_bonus']))
        hours = left // 3600
        minutes = (left % 3600) // 60
        bot.send_message(message.chat.id, f"üïí –ó–∞—á–µ–∫–∞–π—Ç–µ —â–µ {hours} –≥–æ–¥ {minutes} —Ö–≤ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –±–æ–Ω—É—Å—É.")

    save_users()

@bot.message_handler(func=lambda m: m.text == '–ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥—Ä—É–≥–∞')
def invite(message):
    user_id = str(message.from_user.id)
    link = f"https://t.me/Z1RKA_Official_bot?start={user_id}"
    bot.send_message(message.chat.id, f"üîó –ó–∞–ø—Ä–æ—Å–∏ –¥—Ä—É–≥–∞ –∑–∞ —Ü–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º:\n{link}\n\n–ó–∞ –¥—Ä—É–≥–∞ ‚Äî 3 –∑—ñ—Ä–∫–∏!")

@bot.message_handler(func=lambda m: m.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
def stats(message):
    user_id = str(message.from_user.id)
    if user_id not in users:
        bot.send_message(message.chat.id, "‚ùó –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start –¥–ª—è –ø–æ—á–∞—Ç–∫—É.")
        return

    stars = users[user_id]['stars']
    refs = users[user_id].get('refs_count', 0)
    bot.send_message(message.chat.id, f"‚≠ê –í–∞—à—ñ –∑—ñ—Ä–∫–∏: {stars}\nüë• –ó–∞–ø—Ä–æ—à–µ–Ω–æ –¥—Ä—É–∑—ñ–≤: {refs}")

@bot.message_handler(func=lambda m: m.text == '–ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å')
def profile(message):
    user_id = str(message.from_user.id)
    if user_id not in users:
        bot.send_message(message.chat.id, "‚ùó –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start –¥–ª—è –ø–æ—á–∞—Ç–∫—É.")
        return

    stars = users[user_id]['stars']
    refs = users[user_id].get('refs_count', 0)
    bot.send_message(message.chat.id, f"üë§ –ü—Ä–æ—Ñ—ñ–ª—å ID: {user_id}\n‚≠ê –ó—ñ—Ä–∫–∏: {stars}\nüë• –†–µ—Ñ–µ—Ä–∞–ª–∏: {refs}")

@bot.message_handler(func=lambda m: m.text == '–¢–æ–ø-10')
def top_users(message):
    top = sorted(users.items(), key=lambda x: x[1]['stars'], reverse=True)[:10]
    msg = "üèÜ –¢–æ–ø-10 –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:\n"
    for i, (uid, data) in enumerate(top, start=1):
        msg += f"{i}. ID {uid}: ‚òÖ {data['stars']}\n"
    bot.send_message(message.chat.id, msg)

@bot.message_handler(func=lambda m: m.text == '–í–∏–≤–µ—Å—Ç–∏')
def withdraw(message):
    user_id = str(message.from_user.id)
    if user_id not in users:
        bot.send_message(message.chat.id, "‚ùó –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start –¥–ª—è –ø–æ—á–∞—Ç–∫—É.")
        return

    stars = users[user_id]['stars']
    if stars >= 50.0:
        bot.send_message(message.chat.id, "üí¨ –í–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π Telegram username (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: @yourname):")
        bot.register_next_step_handler(message, process_withdraw)
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∑—ñ—Ä–æ–∫. –ú—ñ–Ω—ñ–º—É–º 50 –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–ª—è –≤–∏–≤–æ–¥—É.")

def process_withdraw(message):
    user_input = message.text.strip()
    user_id = str(message.from_user.id)
    if user_id not in users:
        bot.send_message(message.chat.id, "‚ùó –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start –¥–ª—è –ø–æ—á–∞—Ç–∫—É.")
        return

    stars = users[user_id]['stars']
    if not user_input.startswith('@'):
        bot.send_message(message.chat.id, "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç username. –ú–∞—î –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ @.")
        bot.register_next_step_handler(message, process_withdraw)
        return

    try:
        bot.send_message(ADMIN_ID, f"üí∏ –ó–ê–ü–ò–¢ –ù–ê –í–ò–í–Ü–î!\nID: {user_id}\nUsername: {user_input}\n‚≠ê –ó—ñ—Ä–∫–∏: {stars}")
        users[user_id]['stars'] = 0.0
        save_users()
        bot.send_message(message.chat.id, "‚úÖ –ó–∞–ø–∏—Ç –Ω–∞ –≤–∏–≤—ñ–¥ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—É. –û—á—ñ–∫—É–π—Ç–µ!")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É: {e}")

# ==== –ó–∞–ø—É—Å–∫ ====
keep_alive()
print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
bot.polling(none_stop=True)
